"use strict";(self.webpackChunkreact_native_siri_shortcut_docs=self.webpackChunkreact_native_siri_shortcut_docs||[]).push([[442],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,f=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},910:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return f}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],c={toc:[]};function s(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type ShortcutInfo = {\n  activityType: string;\n  userInfo?: { [key: string]: any };\n}\n")))}s.isMDXComponent=!0;var u=["components"],l={sidebar_position:0},p="Listening for Shortcuts",d={unversionedId:"api/listening-for-shortcuts",id:"api/listening-for-shortcuts",title:"Listening for Shortcuts",description:"Whenever the user triggers a shortcut while your app was in the background, the listener will get called, allowing you to handle the shortcut request.",source:"@site/docs/api/listening-for-shortcuts.mdx",sourceDirName:"api",slug:"/api/listening-for-shortcuts",permalink:"/react-native-siri-shortcut/docs/api/listening-for-shortcuts",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/listening-for-shortcuts.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"sidebar",previous:{title:"Project Setup",permalink:"/react-native-siri-shortcut/docs/getting-started/project-setup"},next:{title:"Clearing Shortcuts",permalink:"/react-native-siri-shortcut/docs/api/clearing-shortcuts"}},h={},f=[{value:"API Definition",id:"api-definition",level:2},{value:"<code>addShortcutListener</code>",id:"addshortcutlistener",level:3},{value:"<code>getInitialShortcut</code>",id:"getinitialshortcut",level:3},{value:"Type Reference",id:"type-reference",level:2},{value:"<code>ShortcutListener</code>",id:"shortcutlistener",level:3},{value:"<code>ShortcutInfo</code>",id:"shortcutinfo",level:3}],m={toc:f};function g(e){var t=e.components,n=(0,o.Z)(e,u);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"listening-for-shortcuts"},"Listening for Shortcuts"),(0,i.kt)("p",null,"Whenever the user triggers a shortcut while your app was in the background, the listener will get called, allowing you to handle the shortcut request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport { addShortcutListener } from "react-native-siri-shortcut";\n\nconst App = () => {\n  React.useEffect(() => {\n    const subscription = addShortcutListener(({ userInfo, activityType }) => {\n      console.log(\n        `User requested ${activityType} be handled, with ${userInfo} context`\n      );\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  return null;\n};\n')),(0,i.kt)("h2",{id:"api-definition"},"API Definition"),(0,i.kt)("h3",{id:"addshortcutlistener"},(0,i.kt)("inlineCode",{parentName:"h3"},"addShortcutListener")),(0,i.kt)("p",null,"Adds an event listener for triggered shortcuts."),(0,i.kt)("p",null,"Returns an object with ",(0,i.kt)("inlineCode",{parentName:"p"},"remove()")," to remove this listener."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const subscription = addShortcutListener(callback: ShortcutListener);\n\nsubscription.remove();\n")),(0,i.kt)("h3",{id:"getinitialshortcut"},(0,i.kt)("inlineCode",{parentName:"h3"},"getInitialShortcut")),(0,i.kt)("p",null,"Get the shortcut that launched the app, if any."),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<ShortcutInfo | null>")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const initialShortcut = await getInitialShortcut();\n\nif (initialShortcut) {\n  // Handle the shortcut that launched the app\n}\n")),(0,i.kt)("h2",{id:"type-reference"},"Type Reference"),(0,i.kt)("h3",{id:"shortcutlistener"},(0,i.kt)("inlineCode",{parentName:"h3"},"ShortcutListener")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type ShortcutListener = (shortcut: ShortcutInfo) => void;\n")),(0,i.kt)("h3",{id:"shortcutinfo"},(0,i.kt)("inlineCode",{parentName:"h3"},"ShortcutInfo")),(0,i.kt)(s,{mdxType:"ShortcutInfo"}))}g.isMDXComponent=!0}}]);