"use strict";(self.webpackChunkreact_native_siri_shortcut_docs=self.webpackChunkreact_native_siri_shortcut_docs||[]).push([[941],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=r,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||o;return n?i.createElement(m,a(a({ref:t},c),{},{components:n})):i.createElement(m,a({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7276:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],l={},p="Upgrading from 2.x",s={unversionedId:"migration-v2-v3",id:"migration-v2-v3",title:"Upgrading from 2.x",description:"React Native Siri Shortcut introduced some breaking changes with React Native Siri Shortcut 3.",source:"@site/docs/migration-v2-v3.md",sourceDirName:".",slug:"/migration-v2-v3",permalink:"/docs/migration-v2-v3",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/migration-v2-v3.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Example",permalink:"/docs/example"}},c={},u=[{value:"AppDelegate",id:"appdelegate",level:2},{value:"AddToSiriButton",id:"addtosiributton",level:2},{value:"New Styles",id:"new-styles",level:3},{value:"Deprecated <code>supportsSiriButton</code>",id:"deprecated-supportssiributton",level:3},{value:"Import Change",id:"import-change",level:3},{value:"Shortcut Listener",id:"shortcut-listener",level:2},{value:"<code>getInitialShortcut</code>",id:"getinitialshortcut",level:3},{value:"Deprecated <code>SiriShortcutsEvent</code>",id:"deprecated-sirishortcutsevent",level:3}],d={toc:u};function h(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"upgrading-from-2x"},"Upgrading from 2.x"),(0,o.kt)("p",null,"React Native Siri Shortcut introduced some breaking changes with React Native Siri Shortcut 3."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate")," setup has been simplified, ",(0,o.kt)("inlineCode",{parentName:"p"},"AddToSiriButton")," is easier to use and there have been some other changes."),(0,o.kt)("h2",{id:"appdelegate"},"AppDelegate"),(0,o.kt)("p",null,"Previously, the ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.m")," setup was cumbersome and involved. With v3 it's almost a one-liner, so you just need to apply the following changes to your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.m"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.mm"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="AppDelegate.m"',title:'"AppDelegate.m"'},'// ... imports\n- @import RNSiriShortcuts;\n+ #import <RNSiriShortcuts/RNSiriShortcuts.h>\n\n - (BOOL)application:(UIApplication *)application\ndidFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  ...\n\n-  // Check if the app launched with any shortcuts\n-  BOOL launchedFromShortcut = [launchOptions objectForKey:@"UIApplicationLaunchOptionsUserActivityDictionaryKey"] != nil;\n-  // Add a boolean to the initialProperties to let the app know you got the initial shortcut\n-  NSDictionary *initialProperties = @{ @"launchedFromShortcut":@(launchedFromShortcut) };\n  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                   moduleName:@"example"\n-                                            initialProperties:initialProperties]; // Add the initial properties here\n+                                            initialProperties:nil];\n\n  ...\n}\n\n // This method checks for shortcuts issued to the app\n - (BOOL)application:(UIApplication *)application\ncontinueUserActivity:(NSUserActivity *)userActivity\n  restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> *restorableObjects))restorationHandler\n{\n-  UIViewController *viewController = [self.window rootViewController];\n-  RCTRootView *rootView = (RCTRootView*) [viewController view];\n-\n-  // If the initial properties say the app launched from a shortcut (see above), tell the library about it.\n-  if ([[rootView.appProperties objectForKey:@"launchedFromShortcut"] boolValue]) {\n-    ShortcutsModule.initialUserActivity = userActivity;\n-\n-    rootView.appProperties = @{ @"launchedFromShortcut":@NO };\n-  }\n-\n-  [ShortcutsModule onShortcutReceivedWithUserActivity:userActivity];\n-\n-  return YES;\n+  return [RNSSSiriShortcuts application:application continueUserActivity:userActivity restorationHandler:restorationHandler];\n}\n')),(0,o.kt)("h2",{id:"addtosiributton"},"AddToSiriButton"),(0,o.kt)("h3",{id:"new-styles"},"New Styles"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AddToSiriButton")," now supports two extra styles introduced in iOS 13, ",(0,o.kt)("inlineCode",{parentName:"p"},".automatic")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".automaticOutline"),". These two styles will use ",(0,o.kt)("inlineCode",{parentName:"p"},".white"),"/",(0,o.kt)("inlineCode",{parentName:"p"},".black")," depending on the user's device theme."),(0,o.kt)("p",null,"Since these styles were only introduced in iOS 13, devices on iOS 12 will default to ",(0,o.kt)("inlineCode",{parentName:"p"},".white")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".whiteOutline"),", respectfully."),(0,o.kt)("h3",{id:"deprecated-supportssiributton"},"Deprecated ",(0,o.kt)("inlineCode",{parentName:"h3"},"supportsSiriButton")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"supportsSiriButton")," was cumbersome to use and unintuitive. ",(0,o.kt)("inlineCode",{parentName:"p"},"AddToSiriButton")," will now render ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," on platform's other than iOS, and on iOS versions prior to 12, by default."),(0,o.kt)("h3",{id:"import-change"},"Import Change"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AddToSiriButton")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SiriButtonStyles")," are not named exports in ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js"),". This means you should import them like this from now on:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { AddToSiriButton, SiriButtonStyles } from "react-native-siri-shortcut";\n')),(0,o.kt)("h2",{id:"shortcut-listener"},"Shortcut Listener"),(0,o.kt)("p",null,"Prior to v3, adding a shortcut listener when the app was opened via a shortcut would immediately trigger the listener."),(0,o.kt)("p",null,"Since this is not obvious behavior, since you could setup the listener later down the app's lifetime, therefore handling a shortcut that the user triggered long ago, this is no longer the observed behavior."),(0,o.kt)("h3",{id:"getinitialshortcut"},(0,o.kt)("inlineCode",{parentName:"h3"},"getInitialShortcut")),(0,o.kt)("p",null,"A new API for ",(0,o.kt)("a",{parentName:"p",href:"api/listening-for-shortcuts#getinitialshortcut"},(0,o.kt)("inlineCode",{parentName:"a"},"getInitialShortcut"))," allows you to access the initial shortcut that launched the app."),(0,o.kt)("h3",{id:"deprecated-sirishortcutsevent"},"Deprecated ",(0,o.kt)("inlineCode",{parentName:"h3"},"SiriShortcutsEvent")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SiriShortcutsEvent")," was replaced with ",(0,o.kt)("a",{parentName:"p",href:"api/listening-for-shortcuts#addshortcutlistener"},(0,o.kt)("inlineCode",{parentName:"a"},"addShortcutListener")),"."))}h.isMDXComponent=!0}}]);